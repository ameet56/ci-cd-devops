# This file defines the GitHub Actions workflow that will run on every push.

name: DevSecOps CI/CD Pipeline

# This workflow triggers on every push to the 'main' branch.
on:
  push:
    branches:
      - main

jobs:
  # --------------------------------------------------------------------------
  # JOB 1: Security Scanning
  # This job runs security checks on your Terraform code and the Docker image
  # to satisfy the task requirements.
  # --------------------------------------------------------------------------
  security-scans:
    runs-on: ubuntu-latest
    steps:
      # Step 1.1: Check out the code from the repository so the workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1.2: Scan Terraform code for security issues using tfsec.
      - name: Run tfsec scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          # This will scan all .tf files in the repository.
          working_directory: .

      # Step 1.3: Scan the Docker image for vulnerabilities using Trivy.
      # This step uses the Dockerfile in your repo to build an image and then scans it.
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.13.0
        with:
          image-ref: '.' # Scan the Dockerfile in the current directory
          format: 'table'
          exit-code: '1' # Fail the build if critical vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # --------------------------------------------------------------------------
  # JOB 2: Manage Kubernetes Secrets (Demonstration)
  # This job simulates the process of encrypting a Kubernetes secret using
  # the Sealed Secrets CLI, as required by the task.
  # --------------------------------------------------------------------------
  manage-secrets:
    runs-on: ubuntu-latest
    needs: security-scans # This job only runs if the 'security-scans' job passes.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubeseal CLI
        run: |
          wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/kubeseal-0.18.0-linux-amd64.tar.gz
          tar -xvzf kubeseal-0.18.0-linux-amd64.tar.gz
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal

      - name: Create a placeholder Kubernetes secret manifest
        run: |
          mkdir -p manifests
          cat <<EOF > manifests/my-secret.yml
          apiVersion: v1
          kind: Secret
          metadata:
            name: my-database-credentials
          type: Opaque
          stringData:
            username: "admin"
            password: "SuperSecretPassword123"
          EOF

      - name: Simulate encrypting the secret using Sealed Secrets
        # In a real-world scenario, you would fetch the public key from your cluster.
        run: |
          echo "Simulating kubeseal encryption..."
          # The real command would look like this:
          # kubeseal --format yaml < manifests/my-secret.yml > manifests/sealed-secret.yml
          # For this demo, we'll just create a placeholder encrypted file.
          cat <<EOF > manifests/sealed-secret.yml
          apiVersion: bitnami.com/v1alpha1
          kind: SealedSecret
          metadata:
            name: my-database-credentials
            namespace: default
          spec:
            encryptedData:
              password: Ag... (this would be the real encrypted data)
              username: Ag... (this would be the real encrypted data)
          EOF

      - name: Upload Sealed Secret as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: sealed-secret
          path: manifests/sealed-secret.yml

  # --------------------------------------------------------------------------
  # JOB 3: Trigger AWS CodePipeline Deployment
  # This is the final step. If all previous jobs pass, this job will start
  # the AWS CodePipeline we built in Task 1.
  # --------------------------------------------------------------------------
  trigger-deployment:
    runs-on: ubuntu-latest
    needs: manage-secrets # This job only runs if the 'manage-secrets' job passes.
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start AWS CodePipeline execution
        run: |
          echo "Starting AWS CodePipeline: ${{ secrets.AWS_PIPELINE_NAME }}"
          aws codepipeline start-pipeline-execution --name ${{ secrets.AWS_PIPELINE_NAME }}
